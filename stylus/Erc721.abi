/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IERC721  {
    function setTokenUri(uint256 token_id, string calldata token_uri) external;

    function tokenUri(uint256 token_id) external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function ownerOf(uint256 token_id) external view returns (address);

    function requireOwned(uint256 token_id) external view returns (address);

    function mint(address to, uint256 token_id) external;

    function mintToken(address to, string calldata token_uri) external;

    function checkAuthorized(address owner, address operator, uint256 token_id) external view;

    function isAuthorized(address owner, address spender, uint256 token_id) external view returns (bool);

    function isApprovedForAll(address owner, address operator) external view returns (bool);

    function getApproved(uint256 token_id) external view returns (address);

    function approve(address to, uint256 token_id, address auth, bool emit_event) external;

    function update(address to, uint256 token_id, address auth) external returns (address);

    error ERC721InvalidOwner(address);

    error ERC721InvalidReceiver(address);

    error ERC721InvalidSender(address);

    error ERC721NonexistentToken(uint256);

    error ERC721InsufficientApproval(address, uint256);

    error ERC721InvalidApprover(address);
}
